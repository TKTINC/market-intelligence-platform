version: '3.8'

services:
  # Enhanced FastAPI Gateway
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: mip-api-gateway
    ports:
      - "8000:8000"
    environment:
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your_jwt_secret_key_here}
      - POLYGON_API_KEY=${POLYGON_API_KEY:-your_polygon_api_key}
      - ALPHA_VANTAGE_API_KEY=${ALPHA_VANTAGE_API_KEY:-your_alpha_vantage_api_key}
      - LOG_LEVEL=INFO
      - ENVIRONMENT=production
    depends_on:
      - redis
      - finbert-sentiment-service
      - tft-forecasting-service
      - gpt4-strategy-service
      - llama-explanation-service
      - realtime-processing-service
    networks:
      - mip-network
    volumes:
      - ./logs:/app/logs
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Redis Cache & Session Store
  redis:
    image: redis:7.2-alpine
    container_name: mip-redis
    ports:
      - "6379:6379"
    environment:
      - REDIS_PASSWORD=${REDIS_PASSWORD:-}
    networks:
      - mip-network
    volumes:
      - redis_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    command: redis-server /usr/local/etc/redis/redis.conf
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 5s
      retries: 3

  # FinBERT Sentiment Analysis Service
  finbert-sentiment-service:
    image: mip/finbert-sentiment:latest
    container_name: mip-finbert-sentiment
    ports:
      - "8005:8005"
    environment:
      - MODEL_PATH=/app/models/finbert
      - BATCH_SIZE=16
      - MAX_LENGTH=512
      - REDIS_URL=redis://redis:6379
    networks:
      - mip-network
    volumes:
      - finbert_models:/app/models
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # TFT Forecasting Service
  tft-forecasting-service:
    image: mip/tft-forecasting:latest
    container_name: mip-tft-forecasting
    ports:
      - "8008:8008"
    environment:
      - MODEL_PATH=/app/models/tft
      - FORECAST_HORIZONS=1,5,10,21
      - REDIS_URL=redis://redis:6379
      - MARKET_DATA_URL=http://api-gateway:8000/market
    networks:
      - mip-network
    volumes:
      - tft_models:/app/models
      - market_data:/app/data
    restart: unless-stopped

  # GPT-4 Strategy Service
  gpt4-strategy-service:
    image: mip/gpt4-strategy:latest
    container_name: mip-gpt4-strategy
    ports:
      - "8007:8007"
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - MODEL_NAME=gpt-4-turbo-preview
      - MAX_TOKENS=2000
      - TEMPERATURE=0.7
      - REDIS_URL=redis://redis:6379
    networks:
      - mip-network
    restart: unless-stopped

  # Llama Explanation Service
  llama-explanation-service:
    image: mip/llama-explanation:latest
    container_name: mip-llama-explanation
    ports:
      - "8006:8006"
    environment:
      - MODEL_PATH=/app/models/llama
      - MAX_LENGTH=1000
      - TEMPERATURE=0.6
      - REDIS_URL=redis://redis:6379
    networks:
      - mip-network
    volumes:
      - llama_models:/app/models
    restart: unless-stopped
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

  # Real-time Processing Service
  realtime-processing-service:
    image: mip/realtime-processing:latest
    container_name: mip-realtime-processing
    ports:
      - "8009:8009"
    environment:
      - REDIS_URL=redis://redis:6379
      - KAFKA_BOOTSTRAP_SERVERS=${KAFKA_BOOTSTRAP_SERVERS:-kafka:9092}
      - WEBSOCKET_URL=ws://api-gateway:8000/ws
      - AGENT_SERVICES=finbert-sentiment-service:8005,tft-forecasting-service:8008,gpt4-strategy-service:8007,llama-explanation-service:8006
    networks:
      - mip-network
    depends_on:
      - redis
      - kafka
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: mip-postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-mip_database}
      - POSTGRES_USER=${POSTGRES_USER:-mip_user}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-mip_password}
    networks:
      - mip-network
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mip_user}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka Message Broker
  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: mip-kafka
    ports:
      - "9092:9092"
    environment:
      - KAFKA_BROKER_ID=1
      - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
      - KAFKA_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR=1
      - KAFKA_LOG_RETENTION_HOURS=24
      - KAFKA_LOG_RETENTION_BYTES=1073741824
    networks:
      - mip-network
    depends_on:
      - zookeeper
    restart: unless-stopped

  # Zookeeper for Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: mip-zookeeper
    ports:
      - "2181:2181"
    environment:
      - ZOOKEEPER_CLIENT_PORT=2181
      - ZOOKEEPER_TICK_TIME=2000
    networks:
      - mip-network
    volumes:
      - zookeeper_data:/var/lib/zookeeper/data
      - zookeeper_logs:/var/lib/zookeeper/log
    restart: unless-stopped

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: mip-prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    networks:
      - mip-network
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    restart: unless-stopped

  # Grafana Dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: mip-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    networks:
      - mip-network
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped
    depends_on:
      - prometheus

  # Nginx Load Balancer
  nginx:
    image: nginx:alpine
    container_name: mip-nginx
    ports:
      - "80:80"
      - "443:443"
    networks:
      - mip-network
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - ./nginx/logs:/var/log/nginx
    depends_on:
      - api-gateway
    restart: unless-stopped

  # ElasticSearch for Logging
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: mip-elasticsearch
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    networks:
      - mip-network
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    restart: unless-stopped

  # Kibana for Log Visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: mip-kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    networks:
      - mip-network
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # Logstash for Log Processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: mip-logstash
    environment:
      - "LS_JAVA_OPTS=-Xmx256m -Xms256m"
    networks:
      - mip-network
    volumes:
      - ./logging/logstash.conf:/usr/share/logstash/pipeline/logstash.conf
    depends_on:
      - elasticsearch
    restart: unless-stopped

  # React Dashboard (Frontend)
  react-dashboard:
    build:
      context: ../react-dashboard
      dockerfile: Dockerfile
    container_name: mip-react-dashboard
    ports:
      - "3001:3000"
    environment:
      - REACT_APP_API_URL=http://localhost:8000
      - REACT_APP_WS_URL=ws://localhost:8000/ws
      - REACT_APP_ENV=production
    networks:
      - mip-network
    depends_on:
      - api-gateway
    restart: unless-stopped

networks:
  mip-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
    driver: local
  postgres_data:
    driver: local
  finbert_models:
    driver: local
  tft_models:
    driver: local
  llama_models:
    driver: local
  market_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  elasticsearch_data:
    driver: local
  zookeeper_data:
    driver: local
  zookeeper_logs:
    driver: local
