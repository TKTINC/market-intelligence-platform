version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    container_name: mip-postgres
    environment:
      POSTGRES_DB: mip_dev
      POSTGRES_USER: mip_user
      POSTGRES_PASSWORD: mip_password
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/migrations:/docker-entrypoint-initdb.d
    networks:
      - mip-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U mip_user -d mip_dev"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: mip-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - mip-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Kafka (using Confluent)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: mip-zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - "2181:2181"
    networks:
      - mip-network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: mip-kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka_data:/var/lib/kafka/data
    networks:
      - mip-network
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 5

  # Enhanced Data Ingestion Service
  data-ingestion:
    build:
      context: ./services/data-ingestion
      dockerfile: Dockerfile
    container_name: mip-data-ingestion
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    environment:
      # Database
      DATABASE_URL: postgresql://mip_user:mip_password@postgres:5432/mip_dev
      
      # Redis
      REDIS_HOST: redis
      REDIS_PORT: 6379
      
      # Kafka
      KAFKA_BOOTSTRAP_SERVERS: kafka:9092
      KAFKA_SECURITY_PROTOCOL: PLAINTEXT
      
      # Service Config
      ENVIRONMENT: dev
      LOG_LEVEL: INFO
      AWS_REGION: us-east-1
      
      # API Keys (use .env file or secrets in production)
      NEWSAPI_API_KEY: ${NEWSAPI_API_KEY:-dummy}
      ALPHAVANTAGE_API_KEY: ${ALPHAVANTAGE_API_KEY:-dummy}
      TWITTER_BEARER_TOKEN: ${TWITTER_BEARER_TOKEN:-dummy}
      
      # Options Data Sources
      CBOE_API_KEY: ${CBOE_API_KEY:-dummy}
      ORATS_API_KEY: ${ORATS_API_KEY:-dummy}
      
      # Circuit Breaker Settings
      CIRCUIT_BREAKER_THRESHOLD: 5
      CIRCUIT_BREAKER_TIMEOUT: 60
      
      # Collection Intervals
      NEWS_COLLECTION_INTERVAL: 300
      MARKET_COLLECTION_INTERVAL: 60
      OPTIONS_COLLECTION_INTERVAL: 30
    ports:
      - "8000:8000"  # Metrics endpoint
    volumes:
      - ./logs:/var/log/mip
    networks:
      - mip-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/metrics"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus (Monitoring)
  prometheus:
    image: prom/prometheus:latest
    container_name: mip-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./infrastructure/monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - mip-network

  # Grafana (Visualization)
  grafana:
    image: grafana/grafana:latest
    container_name: mip-grafana
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./infrastructure/monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
      - ./infrastructure/monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
    networks:
      - mip-network

networks:
  mip-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  kafka_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
