version: '3.8'

services:
  # ==============================================================================
  # DATABASE SERVICES
  # ==============================================================================
  postgres:
    image: postgres:15
    container_name: mip-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-market_intelligence}
      POSTGRES_USER: ${POSTGRES_USER:-mip_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-mip_secure_password_2024}
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-mip_user}"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mip-network

  redis:
    image: redis:7-alpine
    container_name: mip-redis
    command: redis-server --requirepass ${REDIS_PASSWORD:-redis_secure_password_2024}
    ports:
      - "${REDIS_PORT:-6379}:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-redis_secure_password_2024}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mip-network

  # ==============================================================================
  # CORE SERVICES
  # ==============================================================================
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    image: mip-api-gateway:latest
    container_name: mip-api-gateway
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-mip_user}:${POSTGRES_PASSWORD:-mip_secure_password_2024}@postgres:5432/${POSTGRES_DB:-market_intelligence}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379
      - JWT_SECRET_KEY=${JWT_SECRET_KEY:-your_jwt_secret_key}
      - ENVIRONMENT=${ENVIRONMENT:-development}
    ports:
      - "${API_GATEWAY_PORT:-8000}:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - mip-network

  agent-orchestration:
    build:
      context: ./services/agent-orchestration
      dockerfile: Dockerfile
    image: mip-agent-orchestration:latest
    container_name: mip-agent-orchestration
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-mip_user}:${POSTGRES_PASSWORD:-mip_secure_password_2024}@postgres:5432/${POSTGRES_DB:-market_intelligence}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
    ports:
      - "${AGENT_ORCHESTRATION_PORT:-8001}:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mip-network

  sentiment-analysis:
    build:
      context: ./services/sentiment-analysis
      dockerfile: Dockerfile
    image: mip-sentiment-analysis:latest
    container_name: mip-sentiment-analysis
    environment:
      - MODEL_NAME=ProsusAI/finbert
    ports:
      - "${SENTIMENT_ANALYSIS_PORT:-8002}:8002"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s
    networks:
      - mip-network

  gpt4-strategy:
    build:
      context: ./services/gpt4-strategy
      dockerfile: Dockerfile
    image: mip-gpt4-strategy:latest
    container_name: mip-gpt4-strategy
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    ports:
      - "${GPT4_STRATEGY_PORT:-8003}:8003"
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mip-network

  virtual-trading:
    build:
      context: ./services/virtual-trading
      dockerfile: Dockerfile
    image: mip-virtual-trading:latest
    container_name: mip-virtual-trading
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-mip_user}:${POSTGRES_PASSWORD:-mip_secure_password_2024}@postgres:5432/${POSTGRES_DB:-market_intelligence}
      - REDIS_URL=redis://:${REDIS_PASSWORD:-redis_secure_password_2024}@redis:6379
    ports:
      - "${VIRTUAL_TRADING_PORT:-8006}:8006"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - mip-network

volumes:
  postgres_data:
  redis_data:

networks:
  mip-network:
    driver: bridge
